//----------------------
// <auto-generated>
//     Generated by node_generator.py
//     source: langs-native/tree-sitter-javascript/src/node-types.json
// </auto-generated>
//----------------------

#nullable enable

using System.Linq;

namespace TreeSitter.JavaScript.Nodes {

    public abstract class JavaScriptLanguageNode
    {
        public static JavaScriptLanguageNode FromNode(TreeSitter.Node node) {
            if (node is null) throw new System.ArgumentNullException(nameof(node));
            if (!node.IsNamed) return new JavaScriptLanguageNodeTerminalNode(node);
            switch (node.Kind) {
                case "spread_element": return new SpreadElement(node);
                case "string": return new String(node);
                case "variable_declarator": return new VariableDeclarator(node);
                case "object_pattern": return new ObjectPattern(node);
                case "ternary_expression": return new TernaryExpression(node);
                case "switch_case": return new SwitchCase(node);
                case "regex": return new Regex(node);
                case "try_statement": return new TryStatement(node);
                case "assignment_pattern": return new AssignmentPattern(node);
                case "number": return new Number(node);
                case "export_specifier": return new ExportSpecifier(node);
                case "parenthesized_expression": return new ParenthesizedExpression(node);
                case "variable_declaration": return new VariableDeclaration(node);
                case "identifier": return new Identifier(node);
                case "undefined": return new Undefined(node);
                case "statement_identifier": return new StatementIdentifier(node);
                case "lexical_declaration": return new LexicalDeclaration(node);
                case "await_expression": return new AwaitExpression(node);
                case "jsx_fragment": return new JsxFragment(node);
                case "statement_block": return new StatementBlock(node);
                case "string_fragment": return new StringFragment(node);
                case "pair_pattern": return new PairPattern(node);
                case "for_statement": return new ForStatement(node);
                case "null": return new Null(node);
                case "while_statement": return new WhileStatement(node);
                case "template_substitution": return new TemplateSubstitution(node);
                case "return_statement": return new ReturnStatement(node);
                case "arrow_function": return new ArrowFunction(node);
                case "export_statement": return new ExportStatement(node);
                case "expression_statement": return new ExpressionStatement(node);
                case "object_assignment_pattern": return new ObjectAssignmentPattern(node);
                case "jsx_attribute": return new JsxAttribute(node);
                case "debugger_statement": return new DebuggerStatement(node);
                case "with_statement": return new WithStatement(node);
                case "call_expression": return new CallExpression(node);
                case "empty_statement": return new EmptyStatement(node);
                case "jsx_closing_element": return new JsxClosingElement(node);
                case "template_string": return new TemplateString(node);
                case "namespace_export": return new NamespaceExport(node);
                case "named_imports": return new NamedImports(node);
                case "for_in_statement": return new ForInStatement(node);
                case "generator_function_declaration": return new GeneratorFunctionDeclaration(node);
                case "namespace_import": return new NamespaceImport(node);
                case "meta_property": return new MetaProperty(node);
                case "class": return new Class(node);
                case "unary_expression": return new UnaryExpression(node);
                case "continue_statement": return new ContinueStatement(node);
                case "shorthand_property_identifier_pattern": return new ShorthandPropertyIdentifierPattern(node);
                case "super": return new Super(node);
                case "jsx_expression": return new JsxExpression(node);
                case "else_clause": return new ElseClause(node);
                case "switch_body": return new SwitchBody(node);
                case "class_declaration": return new ClassDeclaration(node);
                case "computed_property_name": return new ComputedPropertyName(node);
                case "program": return new Program(node);
                case "generator_function": return new GeneratorFunction(node);
                case "method_definition": return new MethodDefinition(node);
                case "decorator": return new Decorator(node);
                case "shorthand_property_identifier": return new ShorthandPropertyIdentifier(node);
                case "import_specifier": return new ImportSpecifier(node);
                case "hash_bang_line": return new HashBangLine(node);
                case "regex_flags": return new RegexFlags(node);
                case "switch_default": return new SwitchDefault(node);
                case "labeled_statement": return new LabeledStatement(node);
                case "rest_pattern": return new RestPattern(node);
                case "sequence_expression": return new SequenceExpression(node);
                case "import_statement": return new ImportStatement(node);
                case "augmented_assignment_expression": return new AugmentedAssignmentExpression(node);
                case "switch_statement": return new SwitchStatement(node);
                case "jsx_text": return new JsxText(node);
                case "array": return new Array(node);
                case "property_identifier": return new PropertyIdentifier(node);
                case "binary_expression": return new BinaryExpression(node);
                case "break_statement": return new BreakStatement(node);
                case "import": return new Import(node);
                case "field_definition": return new FieldDefinition(node);
                case "array_pattern": return new ArrayPattern(node);
                case "function_declaration": return new FunctionDeclaration(node);
                case "true": return new True(node);
                case "arguments": return new Arguments(node);
                case "false": return new False(node);
                case "finally_clause": return new FinallyClause(node);
                case "class_heritage": return new ClassHeritage(node);
                case "import_clause": return new ImportClause(node);
                case "assignment_expression": return new AssignmentExpression(node);
                case "function": return new Function(node);
                case "if_statement": return new IfStatement(node);
                case "jsx_opening_element": return new JsxOpeningElement(node);
                case "jsx_namespace_name": return new JsxNamespaceName(node);
                case "object": return new Object(node);
                case "private_property_identifier": return new PrivatePropertyIdentifier(node);
                case "catch_clause": return new CatchClause(node);
                case "subscript_expression": return new SubscriptExpression(node);
                case "update_expression": return new UpdateExpression(node);
                case "do_statement": return new DoStatement(node);
                case "this": return new This(node);
                case "formal_parameters": return new FormalParameters(node);
                case "export_clause": return new ExportClause(node);
                case "regex_pattern": return new RegexPattern(node);
                case "jsx_element": return new JsxElement(node);
                case "comment": return new Comment(node);
                case "class_body": return new ClassBody(node);
                case "pair": return new Pair(node);
                case "nested_identifier": return new NestedIdentifier(node);
                case "member_expression": return new MemberExpression(node);
                case "escape_sequence": return new EscapeSequence(node);
                case "throw_statement": return new ThrowStatement(node);
                case "jsx_self_closing_element": return new JsxSelfClosingElement(node);
                case "yield_expression": return new YieldExpression(node);
                case "new_expression": return new NewExpression(node);
                case "ERROR": return new ErrorNode(node);
                default: throw new System.ArgumentException("unknown node type: " + node.Kind, nameof(node));
            }
        }

    
        public string Kind { get; set; }

        protected JavaScriptLanguageNode(TreeSitter.Node node)
        {
            Kind = node.Kind;
        }
    }
    
    public class JavaScriptLanguageNodeTerminalNode : JavaScriptLanguageNode
    {
        public JavaScriptLanguageNodeTerminalNode(TreeSitter.Node node) : base(node)
        {
        }
    }
    
    public class ErrorNode : JavaScriptLanguageNode
    {
        public ErrorNode(TreeSitter.Node node) : base(node)
        {
        }
    }

    public interface Declaration : Statement
    {
    }

    public interface Expression
    {
    }

    public interface Pattern
    {
    }

    public interface PrimaryExpression : Expression
    {
    }

    public interface Statement
    {
    }

    public class Arguments : JavaScriptLanguageNode
    {
        public System.Collections.Generic.List<JavaScriptLanguageNode> Children { get; set; }
        public Arguments(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "arguments");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Array : JavaScriptLanguageNode, PrimaryExpression
    {
        public System.Collections.Generic.List<JavaScriptLanguageNode> Children { get; set; }
        public Array(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "array");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ArrayPattern : JavaScriptLanguageNode, Pattern
    {
        public System.Collections.Generic.List<JavaScriptLanguageNode> Children { get; set; }
        public ArrayPattern(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "array_pattern");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ArrowFunction : JavaScriptLanguageNode, PrimaryExpression
    {
        public JavaScriptLanguageNode Body { get; set; }
        public Identifier? Parameter { get; set; }
        public FormalParameters? Parameters { get; set; }
        public ArrowFunction(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "arrow_function");
            
            this.Body = (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("body"))!;
            {
                var tmp = node.ChildByFieldName("parameter");
                this.Parameter = tmp is null ? null : new Identifier(tmp);
            }
            {
                var tmp = node.ChildByFieldName("parameters");
                this.Parameters = tmp is null ? null : new FormalParameters(tmp);
            }
        }
    }

    public class AssignmentExpression : JavaScriptLanguageNode, Expression
    {
        public JavaScriptLanguageNode Left { get; set; }
        public Expression Right { get; set; }
        public AssignmentExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "assignment_expression");
            
            this.Left = (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("left"))!;
            this.Right = (Expression) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("right"))!;
        }
    }

    public class AssignmentPattern : JavaScriptLanguageNode
    {
        public Pattern Left { get; set; }
        public Expression Right { get; set; }
        public AssignmentPattern(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "assignment_pattern");
            
            this.Left = (Pattern) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("left"))!;
            this.Right = (Expression) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("right"))!;
        }
    }

    public class AugmentedAssignmentExpression : JavaScriptLanguageNode, Expression
    {
        public JavaScriptLanguageNode Left { get; set; }
        public JavaScriptLanguageNodeTerminalNode Operator { get; set; }
        public Expression Right { get; set; }
        public AugmentedAssignmentExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "augmented_assignment_expression");
            
            this.Left = (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("left"))!;
            this.Operator = new JavaScriptLanguageNodeTerminalNode(node.ChildByFieldName("operator"));
            this.Right = (Expression) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("right"))!;
        }
    }

    public class AwaitExpression : JavaScriptLanguageNode, Expression
    {
        public System.Collections.Generic.List<Expression> Children { get; set; }
        public AwaitExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "await_expression");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Expression) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class BinaryExpression : JavaScriptLanguageNode, Expression
    {
        public Expression Left { get; set; }
        public JavaScriptLanguageNodeTerminalNode Operator { get; set; }
        public Expression Right { get; set; }
        public BinaryExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "binary_expression");
            
            this.Left = (Expression) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("left"))!;
            this.Operator = new JavaScriptLanguageNodeTerminalNode(node.ChildByFieldName("operator"));
            this.Right = (Expression) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("right"))!;
        }
    }

    public class BreakStatement : JavaScriptLanguageNode, Statement
    {
        public StatementIdentifier? Label { get; set; }
        public BreakStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "break_statement");
            
            {
                var tmp = node.ChildByFieldName("label");
                this.Label = tmp is null ? null : new StatementIdentifier(tmp);
            }
        }
    }

    public class CallExpression : JavaScriptLanguageNode, PrimaryExpression
    {
        public JavaScriptLanguageNode Arguments { get; set; }
        public Expression Function { get; set; }
        public CallExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "call_expression");
            
            this.Arguments = (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("arguments"))!;
            this.Function = (Expression) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("function"))!;
        }
    }

    public class CatchClause : JavaScriptLanguageNode
    {
        public StatementBlock Body { get; set; }
        public JavaScriptLanguageNode? Parameter { get; set; }
        public CatchClause(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "catch_clause");
            
            this.Body = new StatementBlock(node.ChildByFieldName("body"));
            {
                var tmp = node.ChildByFieldName("parameter");
                this.Parameter = tmp is null ? null : (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(tmp);
            }
        }
    }

    public class Class : JavaScriptLanguageNode, PrimaryExpression
    {
        public ClassBody Body { get; set; }
        public System.Collections.Generic.List<Decorator> Decorator { get; set; }
        public Identifier? Name { get; set; }
        public System.Collections.Generic.List<ClassHeritage> Children { get; set; }
        public Class(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "class");
            
            this.Body = new ClassBody(node.ChildByFieldName("body"));
            this.Decorator = node.ChildrenByFieldName("decorator").Select(x => new Decorator(x)).ToList();
            {
                var tmp = node.ChildByFieldName("name");
                this.Name = tmp is null ? null : new Identifier(tmp);
            }
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new ClassHeritage(x)).ToList();
        }
    }

    public class ClassBody : JavaScriptLanguageNode
    {
        public System.Collections.Generic.List<JavaScriptLanguageNode> Member { get; set; }
        public ClassBody(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "class_body");
            
            this.Member = node.ChildrenByFieldName("member").Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ClassDeclaration : JavaScriptLanguageNode, Declaration
    {
        public ClassBody Body { get; set; }
        public System.Collections.Generic.List<Decorator> Decorator { get; set; }
        public Identifier Name { get; set; }
        public System.Collections.Generic.List<ClassHeritage> Children { get; set; }
        public ClassDeclaration(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "class_declaration");
            
            this.Body = new ClassBody(node.ChildByFieldName("body"));
            this.Decorator = node.ChildrenByFieldName("decorator").Select(x => new Decorator(x)).ToList();
            this.Name = new Identifier(node.ChildByFieldName("name"));
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new ClassHeritage(x)).ToList();
        }
    }

    public class ClassHeritage : JavaScriptLanguageNode
    {
        public System.Collections.Generic.List<Expression> Children { get; set; }
        public ClassHeritage(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "class_heritage");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Expression) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ComputedPropertyName : JavaScriptLanguageNode
    {
        public System.Collections.Generic.List<Expression> Children { get; set; }
        public ComputedPropertyName(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "computed_property_name");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Expression) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ContinueStatement : JavaScriptLanguageNode, Statement
    {
        public StatementIdentifier? Label { get; set; }
        public ContinueStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "continue_statement");
            
            {
                var tmp = node.ChildByFieldName("label");
                this.Label = tmp is null ? null : new StatementIdentifier(tmp);
            }
        }
    }

    public class DebuggerStatement : JavaScriptLanguageNode, Statement
    {
        public DebuggerStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "debugger_statement");
            
        }
    }

    public class Decorator : JavaScriptLanguageNode
    {
        public System.Collections.Generic.List<JavaScriptLanguageNode> Children { get; set; }
        public Decorator(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "decorator");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class DoStatement : JavaScriptLanguageNode, Statement
    {
        public Statement Body { get; set; }
        public ParenthesizedExpression Condition { get; set; }
        public DoStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "do_statement");
            
            this.Body = (Statement) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("body"))!;
            this.Condition = new ParenthesizedExpression(node.ChildByFieldName("condition"));
        }
    }

    public class ElseClause : JavaScriptLanguageNode
    {
        public System.Collections.Generic.List<Statement> Children { get; set; }
        public ElseClause(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "else_clause");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Statement) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class EmptyStatement : JavaScriptLanguageNode, Statement
    {
        public EmptyStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "empty_statement");
            
        }
    }

    public class ExportClause : JavaScriptLanguageNode
    {
        public System.Collections.Generic.List<ExportSpecifier> Children { get; set; }
        public ExportClause(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "export_clause");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new ExportSpecifier(x)).ToList();
        }
    }

    public class ExportSpecifier : JavaScriptLanguageNode
    {
        public Identifier? Alias { get; set; }
        public Identifier Name { get; set; }
        public ExportSpecifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "export_specifier");
            
            {
                var tmp = node.ChildByFieldName("alias");
                this.Alias = tmp is null ? null : new Identifier(tmp);
            }
            this.Name = new Identifier(node.ChildByFieldName("name"));
        }
    }

    public class ExportStatement : JavaScriptLanguageNode, Statement
    {
        public Declaration? Declaration { get; set; }
        public System.Collections.Generic.List<Decorator> Decorator { get; set; }
        public String? Source { get; set; }
        public Expression? Value { get; set; }
        public System.Collections.Generic.List<JavaScriptLanguageNode> Children { get; set; }
        public ExportStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "export_statement");
            
            {
                var tmp = node.ChildByFieldName("declaration");
                this.Declaration = tmp is null ? null : (Declaration) JavaScriptLanguageNode.FromNode(tmp);
            }
            this.Decorator = node.ChildrenByFieldName("decorator").Select(x => new Decorator(x)).ToList();
            {
                var tmp = node.ChildByFieldName("source");
                this.Source = tmp is null ? null : new String(tmp);
            }
            {
                var tmp = node.ChildByFieldName("value");
                this.Value = tmp is null ? null : (Expression) JavaScriptLanguageNode.FromNode(tmp);
            }
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ExpressionStatement : JavaScriptLanguageNode, Statement
    {
        public System.Collections.Generic.List<JavaScriptLanguageNode> Children { get; set; }
        public ExpressionStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "expression_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class FieldDefinition : JavaScriptLanguageNode
    {
        public System.Collections.Generic.List<Decorator> Decorator { get; set; }
        public JavaScriptLanguageNode Property { get; set; }
        public Expression? Value { get; set; }
        public FieldDefinition(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "field_definition");
            
            this.Decorator = node.ChildrenByFieldName("decorator").Select(x => new Decorator(x)).ToList();
            this.Property = (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("property"))!;
            {
                var tmp = node.ChildByFieldName("value");
                this.Value = tmp is null ? null : (Expression) JavaScriptLanguageNode.FromNode(tmp);
            }
        }
    }

    public class FinallyClause : JavaScriptLanguageNode
    {
        public StatementBlock Body { get; set; }
        public FinallyClause(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "finally_clause");
            
            this.Body = new StatementBlock(node.ChildByFieldName("body"));
        }
    }

    public class ForInStatement : JavaScriptLanguageNode, Statement
    {
        public Statement Body { get; set; }
        public JavaScriptLanguageNodeTerminalNode? Kind { get; set; }
        public JavaScriptLanguageNode Left { get; set; }
        public JavaScriptLanguageNodeTerminalNode Operator { get; set; }
        public JavaScriptLanguageNode Right { get; set; }
        public Expression? Value { get; set; }
        public ForInStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "for_in_statement");
            
            this.Body = (Statement) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("body"))!;
            {
                var tmp = node.ChildByFieldName("kind");
                this.Kind = tmp is null ? null : new JavaScriptLanguageNodeTerminalNode(tmp);
            }
            this.Left = (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("left"))!;
            this.Operator = new JavaScriptLanguageNodeTerminalNode(node.ChildByFieldName("operator"));
            this.Right = (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("right"))!;
            {
                var tmp = node.ChildByFieldName("value");
                this.Value = tmp is null ? null : (Expression) JavaScriptLanguageNode.FromNode(tmp);
            }
        }
    }

    public class ForStatement : JavaScriptLanguageNode, Statement
    {
        public Statement Body { get; set; }
        public JavaScriptLanguageNode Condition { get; set; }
        public JavaScriptLanguageNode? Increment { get; set; }
        public JavaScriptLanguageNode Initializer { get; set; }
        public ForStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "for_statement");
            
            this.Body = (Statement) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("body"))!;
            this.Condition = (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("condition"))!;
            {
                var tmp = node.ChildByFieldName("increment");
                this.Increment = tmp is null ? null : (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(tmp);
            }
            this.Initializer = (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("initializer"))!;
        }
    }

    public class FormalParameters : JavaScriptLanguageNode
    {
        public System.Collections.Generic.List<JavaScriptLanguageNode> Children { get; set; }
        public FormalParameters(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "formal_parameters");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Function : JavaScriptLanguageNode, PrimaryExpression
    {
        public StatementBlock Body { get; set; }
        public Identifier? Name { get; set; }
        public FormalParameters Parameters { get; set; }
        public Function(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "function");
            
            this.Body = new StatementBlock(node.ChildByFieldName("body"));
            {
                var tmp = node.ChildByFieldName("name");
                this.Name = tmp is null ? null : new Identifier(tmp);
            }
            this.Parameters = new FormalParameters(node.ChildByFieldName("parameters"));
        }
    }

    public class FunctionDeclaration : JavaScriptLanguageNode, Declaration
    {
        public StatementBlock Body { get; set; }
        public Identifier Name { get; set; }
        public FormalParameters Parameters { get; set; }
        public FunctionDeclaration(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "function_declaration");
            
            this.Body = new StatementBlock(node.ChildByFieldName("body"));
            this.Name = new Identifier(node.ChildByFieldName("name"));
            this.Parameters = new FormalParameters(node.ChildByFieldName("parameters"));
        }
    }

    public class GeneratorFunction : JavaScriptLanguageNode, PrimaryExpression
    {
        public StatementBlock Body { get; set; }
        public Identifier? Name { get; set; }
        public FormalParameters Parameters { get; set; }
        public GeneratorFunction(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "generator_function");
            
            this.Body = new StatementBlock(node.ChildByFieldName("body"));
            {
                var tmp = node.ChildByFieldName("name");
                this.Name = tmp is null ? null : new Identifier(tmp);
            }
            this.Parameters = new FormalParameters(node.ChildByFieldName("parameters"));
        }
    }

    public class GeneratorFunctionDeclaration : JavaScriptLanguageNode, Declaration
    {
        public StatementBlock Body { get; set; }
        public Identifier Name { get; set; }
        public FormalParameters Parameters { get; set; }
        public GeneratorFunctionDeclaration(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "generator_function_declaration");
            
            this.Body = new StatementBlock(node.ChildByFieldName("body"));
            this.Name = new Identifier(node.ChildByFieldName("name"));
            this.Parameters = new FormalParameters(node.ChildByFieldName("parameters"));
        }
    }

    public class IfStatement : JavaScriptLanguageNode, Statement
    {
        public ElseClause? Alternative { get; set; }
        public ParenthesizedExpression Condition { get; set; }
        public Statement Consequence { get; set; }
        public IfStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "if_statement");
            
            {
                var tmp = node.ChildByFieldName("alternative");
                this.Alternative = tmp is null ? null : new ElseClause(tmp);
            }
            this.Condition = new ParenthesizedExpression(node.ChildByFieldName("condition"));
            this.Consequence = (Statement) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("consequence"))!;
        }
    }

    public class Import : JavaScriptLanguageNode, PrimaryExpression
    {
        public Import(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "import");
            
        }
    }

    public class ImportClause : JavaScriptLanguageNode
    {
        public System.Collections.Generic.List<JavaScriptLanguageNode> Children { get; set; }
        public ImportClause(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "import_clause");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ImportSpecifier : JavaScriptLanguageNode
    {
        public Identifier? Alias { get; set; }
        public Identifier Name { get; set; }
        public ImportSpecifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "import_specifier");
            
            {
                var tmp = node.ChildByFieldName("alias");
                this.Alias = tmp is null ? null : new Identifier(tmp);
            }
            this.Name = new Identifier(node.ChildByFieldName("name"));
        }
    }

    public class ImportStatement : JavaScriptLanguageNode, Statement
    {
        public String Source { get; set; }
        public System.Collections.Generic.List<ImportClause> Children { get; set; }
        public ImportStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "import_statement");
            
            this.Source = new String(node.ChildByFieldName("source"));
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new ImportClause(x)).ToList();
        }
    }

    public class JsxAttribute : JavaScriptLanguageNode
    {
        public System.Collections.Generic.List<JavaScriptLanguageNode> Children { get; set; }
        public JsxAttribute(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "jsx_attribute");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class JsxClosingElement : JavaScriptLanguageNode
    {
        public JavaScriptLanguageNode Name { get; set; }
        public JsxClosingElement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "jsx_closing_element");
            
            this.Name = (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("name"))!;
        }
    }

    public class JsxElement : JavaScriptLanguageNode, Expression
    {
        public JsxClosingElement CloseTag { get; set; }
        public JsxOpeningElement OpenTag { get; set; }
        public System.Collections.Generic.List<JavaScriptLanguageNode> Children { get; set; }
        public JsxElement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "jsx_element");
            
            this.CloseTag = new JsxClosingElement(node.ChildByFieldName("close_tag"));
            this.OpenTag = new JsxOpeningElement(node.ChildByFieldName("open_tag"));
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class JsxExpression : JavaScriptLanguageNode
    {
        public System.Collections.Generic.List<JavaScriptLanguageNode> Children { get; set; }
        public JsxExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "jsx_expression");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class JsxFragment : JavaScriptLanguageNode, Expression
    {
        public System.Collections.Generic.List<JavaScriptLanguageNode> Children { get; set; }
        public JsxFragment(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "jsx_fragment");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class JsxNamespaceName : JavaScriptLanguageNode
    {
        public System.Collections.Generic.List<Identifier> Children { get; set; }
        public JsxNamespaceName(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "jsx_namespace_name");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Identifier(x)).ToList();
        }
    }

    public class JsxOpeningElement : JavaScriptLanguageNode
    {
        public System.Collections.Generic.List<JavaScriptLanguageNode> Attribute { get; set; }
        public JavaScriptLanguageNode Name { get; set; }
        public JsxOpeningElement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "jsx_opening_element");
            
            this.Attribute = node.ChildrenByFieldName("attribute").Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
            this.Name = (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("name"))!;
        }
    }

    public class JsxSelfClosingElement : JavaScriptLanguageNode, Expression
    {
        public System.Collections.Generic.List<JavaScriptLanguageNode> Attribute { get; set; }
        public JavaScriptLanguageNode Name { get; set; }
        public JsxSelfClosingElement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "jsx_self_closing_element");
            
            this.Attribute = node.ChildrenByFieldName("attribute").Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
            this.Name = (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("name"))!;
        }
    }

    public class LabeledStatement : JavaScriptLanguageNode, Statement
    {
        public Statement Body { get; set; }
        public StatementIdentifier Label { get; set; }
        public LabeledStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "labeled_statement");
            
            this.Body = (Statement) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("body"))!;
            this.Label = new StatementIdentifier(node.ChildByFieldName("label"));
        }
    }

    public class LexicalDeclaration : JavaScriptLanguageNode, Declaration
    {
        public JavaScriptLanguageNodeTerminalNode Kind { get; set; }
        public System.Collections.Generic.List<VariableDeclarator> Children { get; set; }
        public LexicalDeclaration(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "lexical_declaration");
            
            this.Kind = new JavaScriptLanguageNodeTerminalNode(node.ChildByFieldName("kind"));
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new VariableDeclarator(x)).ToList();
        }
    }

    public class MemberExpression : JavaScriptLanguageNode, Pattern, PrimaryExpression
    {
        public Expression Object { get; set; }
        public JavaScriptLanguageNode Property { get; set; }
        public MemberExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "member_expression");
            
            this.Object = (Expression) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("object"))!;
            this.Property = (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("property"))!;
        }
    }

    public class MetaProperty : JavaScriptLanguageNode, PrimaryExpression
    {
        public MetaProperty(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "meta_property");
            
        }
    }

    public class MethodDefinition : JavaScriptLanguageNode
    {
        public StatementBlock Body { get; set; }
        public System.Collections.Generic.List<Decorator> Decorator { get; set; }
        public JavaScriptLanguageNode Name { get; set; }
        public FormalParameters Parameters { get; set; }
        public MethodDefinition(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "method_definition");
            
            this.Body = new StatementBlock(node.ChildByFieldName("body"));
            this.Decorator = node.ChildrenByFieldName("decorator").Select(x => new Decorator(x)).ToList();
            this.Name = (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("name"))!;
            this.Parameters = new FormalParameters(node.ChildByFieldName("parameters"));
        }
    }

    public class NamedImports : JavaScriptLanguageNode
    {
        public System.Collections.Generic.List<ImportSpecifier> Children { get; set; }
        public NamedImports(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "named_imports");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new ImportSpecifier(x)).ToList();
        }
    }

    public class NamespaceExport : JavaScriptLanguageNode
    {
        public System.Collections.Generic.List<Identifier> Children { get; set; }
        public NamespaceExport(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "namespace_export");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Identifier(x)).ToList();
        }
    }

    public class NamespaceImport : JavaScriptLanguageNode
    {
        public System.Collections.Generic.List<Identifier> Children { get; set; }
        public NamespaceImport(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "namespace_import");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Identifier(x)).ToList();
        }
    }

    public class NestedIdentifier : JavaScriptLanguageNode
    {
        public System.Collections.Generic.List<JavaScriptLanguageNode> Children { get; set; }
        public NestedIdentifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "nested_identifier");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class NewExpression : JavaScriptLanguageNode, Expression
    {
        public Arguments? Arguments { get; set; }
        public JavaScriptLanguageNode Constructor { get; set; }
        public NewExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "new_expression");
            
            {
                var tmp = node.ChildByFieldName("arguments");
                this.Arguments = tmp is null ? null : new Arguments(tmp);
            }
            this.Constructor = (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("constructor"))!;
        }
    }

    public class Object : JavaScriptLanguageNode, PrimaryExpression
    {
        public System.Collections.Generic.List<JavaScriptLanguageNode> Children { get; set; }
        public Object(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "object");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ObjectAssignmentPattern : JavaScriptLanguageNode
    {
        public JavaScriptLanguageNode Left { get; set; }
        public Expression Right { get; set; }
        public ObjectAssignmentPattern(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "object_assignment_pattern");
            
            this.Left = (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("left"))!;
            this.Right = (Expression) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("right"))!;
        }
    }

    public class ObjectPattern : JavaScriptLanguageNode, Pattern
    {
        public System.Collections.Generic.List<JavaScriptLanguageNode> Children { get; set; }
        public ObjectPattern(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "object_pattern");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Pair : JavaScriptLanguageNode
    {
        public JavaScriptLanguageNode Key { get; set; }
        public Expression Value { get; set; }
        public Pair(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "pair");
            
            this.Key = (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("key"))!;
            this.Value = (Expression) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("value"))!;
        }
    }

    public class PairPattern : JavaScriptLanguageNode
    {
        public JavaScriptLanguageNode Key { get; set; }
        public JavaScriptLanguageNode Value { get; set; }
        public PairPattern(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "pair_pattern");
            
            this.Key = (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("key"))!;
            this.Value = (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("value"))!;
        }
    }

    public class ParenthesizedExpression : JavaScriptLanguageNode, PrimaryExpression
    {
        public System.Collections.Generic.List<JavaScriptLanguageNode> Children { get; set; }
        public ParenthesizedExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "parenthesized_expression");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Program : JavaScriptLanguageNode
    {
        public System.Collections.Generic.List<JavaScriptLanguageNode> Children { get; set; }
        public Program(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "program");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Regex : JavaScriptLanguageNode, PrimaryExpression
    {
        public RegexFlags? Flags { get; set; }
        public RegexPattern Pattern { get; set; }
        public Regex(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "regex");
            
            {
                var tmp = node.ChildByFieldName("flags");
                this.Flags = tmp is null ? null : new RegexFlags(tmp);
            }
            this.Pattern = new RegexPattern(node.ChildByFieldName("pattern"));
        }
    }

    public class RestPattern : JavaScriptLanguageNode, Pattern
    {
        public System.Collections.Generic.List<JavaScriptLanguageNode> Children { get; set; }
        public RestPattern(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "rest_pattern");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ReturnStatement : JavaScriptLanguageNode, Statement
    {
        public System.Collections.Generic.List<JavaScriptLanguageNode> Children { get; set; }
        public ReturnStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "return_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class SequenceExpression : JavaScriptLanguageNode
    {
        public Expression Left { get; set; }
        public JavaScriptLanguageNode Right { get; set; }
        public SequenceExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "sequence_expression");
            
            this.Left = (Expression) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("left"))!;
            this.Right = (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("right"))!;
        }
    }

    public class SpreadElement : JavaScriptLanguageNode
    {
        public System.Collections.Generic.List<Expression> Children { get; set; }
        public SpreadElement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "spread_element");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Expression) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class StatementBlock : JavaScriptLanguageNode, Statement
    {
        public System.Collections.Generic.List<Statement> Children { get; set; }
        public StatementBlock(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "statement_block");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Statement) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class String : JavaScriptLanguageNode, PrimaryExpression
    {
        public System.Collections.Generic.List<JavaScriptLanguageNode> Children { get; set; }
        public String(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "string");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class SubscriptExpression : JavaScriptLanguageNode, Pattern, PrimaryExpression
    {
        public JavaScriptLanguageNode Index { get; set; }
        public Expression Object { get; set; }
        public SubscriptExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "subscript_expression");
            
            this.Index = (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("index"))!;
            this.Object = (Expression) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("object"))!;
        }
    }

    public class SwitchBody : JavaScriptLanguageNode
    {
        public System.Collections.Generic.List<JavaScriptLanguageNode> Children { get; set; }
        public SwitchBody(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "switch_body");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class SwitchCase : JavaScriptLanguageNode
    {
        public System.Collections.Generic.List<Statement> Body { get; set; }
        public JavaScriptLanguageNode Value { get; set; }
        public SwitchCase(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "switch_case");
            
            this.Body = node.ChildrenByFieldName("body").Select(x => (Statement) JavaScriptLanguageNode.FromNode(x)!).ToList();
            this.Value = (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("value"))!;
        }
    }

    public class SwitchDefault : JavaScriptLanguageNode
    {
        public System.Collections.Generic.List<Statement> Body { get; set; }
        public SwitchDefault(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "switch_default");
            
            this.Body = node.ChildrenByFieldName("body").Select(x => (Statement) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class SwitchStatement : JavaScriptLanguageNode, Statement
    {
        public SwitchBody Body { get; set; }
        public ParenthesizedExpression Value { get; set; }
        public SwitchStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "switch_statement");
            
            this.Body = new SwitchBody(node.ChildByFieldName("body"));
            this.Value = new ParenthesizedExpression(node.ChildByFieldName("value"));
        }
    }

    public class TemplateString : JavaScriptLanguageNode, PrimaryExpression
    {
        public System.Collections.Generic.List<JavaScriptLanguageNode> Children { get; set; }
        public TemplateString(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "template_string");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class TemplateSubstitution : JavaScriptLanguageNode
    {
        public System.Collections.Generic.List<JavaScriptLanguageNode> Children { get; set; }
        public TemplateSubstitution(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "template_substitution");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class TernaryExpression : JavaScriptLanguageNode, Expression
    {
        public Expression Alternative { get; set; }
        public Expression Condition { get; set; }
        public Expression Consequence { get; set; }
        public TernaryExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "ternary_expression");
            
            this.Alternative = (Expression) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("alternative"))!;
            this.Condition = (Expression) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("condition"))!;
            this.Consequence = (Expression) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("consequence"))!;
        }
    }

    public class ThrowStatement : JavaScriptLanguageNode, Statement
    {
        public System.Collections.Generic.List<JavaScriptLanguageNode> Children { get; set; }
        public ThrowStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "throw_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class TryStatement : JavaScriptLanguageNode, Statement
    {
        public StatementBlock Body { get; set; }
        public FinallyClause? Finalizer { get; set; }
        public CatchClause? Handler { get; set; }
        public TryStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "try_statement");
            
            this.Body = new StatementBlock(node.ChildByFieldName("body"));
            {
                var tmp = node.ChildByFieldName("finalizer");
                this.Finalizer = tmp is null ? null : new FinallyClause(tmp);
            }
            {
                var tmp = node.ChildByFieldName("handler");
                this.Handler = tmp is null ? null : new CatchClause(tmp);
            }
        }
    }

    public class UnaryExpression : JavaScriptLanguageNode, Expression
    {
        public Expression Argument { get; set; }
        public JavaScriptLanguageNodeTerminalNode Operator { get; set; }
        public UnaryExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "unary_expression");
            
            this.Argument = (Expression) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("argument"))!;
            this.Operator = new JavaScriptLanguageNodeTerminalNode(node.ChildByFieldName("operator"));
        }
    }

    public class UpdateExpression : JavaScriptLanguageNode, Expression
    {
        public Expression Argument { get; set; }
        public JavaScriptLanguageNodeTerminalNode Operator { get; set; }
        public UpdateExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "update_expression");
            
            this.Argument = (Expression) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("argument"))!;
            this.Operator = new JavaScriptLanguageNodeTerminalNode(node.ChildByFieldName("operator"));
        }
    }

    public class VariableDeclaration : JavaScriptLanguageNode, Declaration
    {
        public System.Collections.Generic.List<VariableDeclarator> Children { get; set; }
        public VariableDeclaration(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "variable_declaration");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new VariableDeclarator(x)).ToList();
        }
    }

    public class VariableDeclarator : JavaScriptLanguageNode
    {
        public JavaScriptLanguageNode Name { get; set; }
        public Expression? Value { get; set; }
        public VariableDeclarator(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "variable_declarator");
            
            this.Name = (JavaScriptLanguageNode) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("name"))!;
            {
                var tmp = node.ChildByFieldName("value");
                this.Value = tmp is null ? null : (Expression) JavaScriptLanguageNode.FromNode(tmp);
            }
        }
    }

    public class WhileStatement : JavaScriptLanguageNode, Statement
    {
        public Statement Body { get; set; }
        public ParenthesizedExpression Condition { get; set; }
        public WhileStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "while_statement");
            
            this.Body = (Statement) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("body"))!;
            this.Condition = new ParenthesizedExpression(node.ChildByFieldName("condition"));
        }
    }

    public class WithStatement : JavaScriptLanguageNode, Statement
    {
        public Statement Body { get; set; }
        public ParenthesizedExpression Object { get; set; }
        public WithStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "with_statement");
            
            this.Body = (Statement) JavaScriptLanguageNode.FromNode(node.ChildByFieldName("body"))!;
            this.Object = new ParenthesizedExpression(node.ChildByFieldName("object"));
        }
    }

    public class YieldExpression : JavaScriptLanguageNode, Expression
    {
        public System.Collections.Generic.List<Expression> Children { get; set; }
        public YieldExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "yield_expression");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (Expression) JavaScriptLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class Comment : JavaScriptLanguageNode
    {
        public Comment(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "comment");
            
        }
    }

    public class EscapeSequence : JavaScriptLanguageNode
    {
        public EscapeSequence(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "escape_sequence");
            
        }
    }

    public class False : JavaScriptLanguageNode, PrimaryExpression
    {
        public False(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "false");
            
        }
    }

    public class HashBangLine : JavaScriptLanguageNode
    {
        public HashBangLine(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "hash_bang_line");
            
        }
    }

    public class Identifier : JavaScriptLanguageNode, Pattern, PrimaryExpression
    {
        public Identifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "identifier");
            
        }
    }

    public class JsxText : JavaScriptLanguageNode
    {
        public JsxText(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "jsx_text");
            
        }
    }

    public class Null : JavaScriptLanguageNode, PrimaryExpression
    {
        public Null(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "null");
            
        }
    }

    public class Number : JavaScriptLanguageNode, PrimaryExpression
    {
        public Number(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "number");
            
        }
    }

    public class PrivatePropertyIdentifier : JavaScriptLanguageNode
    {
        public PrivatePropertyIdentifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "private_property_identifier");
            
        }
    }

    public class PropertyIdentifier : JavaScriptLanguageNode
    {
        public PropertyIdentifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "property_identifier");
            
        }
    }

    public class RegexFlags : JavaScriptLanguageNode
    {
        public RegexFlags(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "regex_flags");
            
        }
    }

    public class RegexPattern : JavaScriptLanguageNode
    {
        public RegexPattern(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "regex_pattern");
            
        }
    }

    public class ShorthandPropertyIdentifier : JavaScriptLanguageNode
    {
        public ShorthandPropertyIdentifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "shorthand_property_identifier");
            
        }
    }

    public class ShorthandPropertyIdentifierPattern : JavaScriptLanguageNode
    {
        public ShorthandPropertyIdentifierPattern(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "shorthand_property_identifier_pattern");
            
        }
    }

    public class StatementIdentifier : JavaScriptLanguageNode
    {
        public StatementIdentifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "statement_identifier");
            
        }
    }

    public class StringFragment : JavaScriptLanguageNode
    {
        public StringFragment(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "string_fragment");
            
        }
    }

    public class Super : JavaScriptLanguageNode, PrimaryExpression
    {
        public Super(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "super");
            
        }
    }

    public class This : JavaScriptLanguageNode, PrimaryExpression
    {
        public This(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "this");
            
        }
    }

    public class True : JavaScriptLanguageNode, PrimaryExpression
    {
        public True(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "true");
            
        }
    }

    public class Undefined : JavaScriptLanguageNode, Pattern, PrimaryExpression
    {
        public Undefined(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "undefined");
            
        }
    }
}