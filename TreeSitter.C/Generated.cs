//----------------------
// <auto-generated>
//     Generated by node_generator.py
//     source: langs-native/tree-sitter-c/src/node-types.json
// </auto-generated>
//----------------------

#nullable enable

using System.Linq;

namespace TreeSitter.C.Nodes {

    public abstract class CLanguageNode
    {
        public static CLanguageNode FromNode(TreeSitter.Node node) {
            if (node is null) throw new System.ArgumentNullException(nameof(node));
            if (!node.IsNamed) return new CLanguageNodeTerminalNode(node);
            switch (node.Kind) {
                case "cast_expression": return new CastExpression(node);
                case "pointer_declarator": return new PointerDeclarator(node);
                case "preproc_params": return new PreprocParams(node);
                case "parenthesized_declarator": return new ParenthesizedDeclarator(node);
                case "field_declaration_list": return new FieldDeclarationList(node);
                case "translation_unit": return new TranslationUnit(node);
                case "linkage_specification": return new LinkageSpecification(node);
                case "argument_list": return new ArgumentList(node);
                case "field_declaration": return new FieldDeclaration(node);
                case "pointer_expression": return new PointerExpression(node);
                case "type_identifier": return new TypeIdentifier(node);
                case "compound_literal_expression": return new CompoundLiteralExpression(node);
                case "function_declarator": return new FunctionDeclarator(node);
                case "ms_based_modifier": return new MsBasedModifier(node);
                case "system_lib_string": return new SystemLibString(node);
                case "macro_type_specifier": return new MacroTypeSpecifier(node);
                case "field_designator": return new FieldDesignator(node);
                case "init_declarator": return new InitDeclarator(node);
                case "parenthesized_expression": return new ParenthesizedExpression(node);
                case "identifier": return new Identifier(node);
                case "parameter_declaration": return new ParameterDeclaration(node);
                case "compound_statement": return new CompoundStatement(node);
                case "statement_identifier": return new StatementIdentifier(node);
                case "preproc_directive": return new PreprocDirective(node);
                case "ms_restrict_modifier": return new MsRestrictModifier(node);
                case "struct_specifier": return new StructSpecifier(node);
                case "concatenated_string": return new ConcatenatedString(node);
                case "for_statement": return new ForStatement(node);
                case "preproc_function_def": return new PreprocFunctionDef(node);
                case "null": return new Null(node);
                case "while_statement": return new WhileStatement(node);
                case "return_statement": return new ReturnStatement(node);
                case "preproc_else": return new PreprocElse(node);
                case "sizeof_expression": return new SizeofExpression(node);
                case "ms_unsigned_ptr_modifier": return new MsUnsignedPtrModifier(node);
                case "expression_statement": return new ExpressionStatement(node);
                case "preproc_elif": return new PreprocElif(node);
                case "enum_specifier": return new EnumSpecifier(node);
                case "function_definition": return new FunctionDefinition(node);
                case "preproc_def": return new PreprocDef(node);
                case "call_expression": return new CallExpression(node);
                case "preproc_defined": return new PreprocDefined(node);
                case "field_identifier": return new FieldIdentifier(node);
                case "preproc_call": return new PreprocCall(node);
                case "array_declarator": return new ArrayDeclarator(node);
                case "conditional_expression": return new ConditionalExpression(node);
                case "unary_expression": return new UnaryExpression(node);
                case "continue_statement": return new ContinueStatement(node);
                case "initializer_pair": return new InitializerPair(node);
                case "variadic_parameter": return new VariadicParameter(node);
                case "ms_signed_ptr_modifier": return new MsSignedPtrModifier(node);
                case "preproc_if": return new PreprocIf(node);
                case "subscript_designator": return new SubscriptDesignator(node);
                case "preproc_include": return new PreprocInclude(node);
                case "comma_expression": return new CommaExpression(node);
                case "abstract_function_declarator": return new AbstractFunctionDeclarator(node);
                case "ms_unaligned_ptr_modifier": return new MsUnalignedPtrModifier(node);
                case "preproc_arg": return new PreprocArg(node);
                case "type_definition": return new TypeDefinition(node);
                case "case_statement": return new CaseStatement(node);
                case "enumerator": return new Enumerator(node);
                case "ms_pointer_modifier": return new MsPointerModifier(node);
                case "attributed_declarator": return new AttributedDeclarator(node);
                case "ms_call_modifier": return new MsCallModifier(node);
                case "attribute_declaration": return new AttributeDeclaration(node);
                case "labeled_statement": return new LabeledStatement(node);
                case "ms_declspec_modifier": return new MsDeclspecModifier(node);
                case "field_expression": return new FieldExpression(node);
                case "storage_class_specifier": return new StorageClassSpecifier(node);
                case "switch_statement": return new SwitchStatement(node);
                case "initializer_list": return new InitializerList(node);
                case "binary_expression": return new BinaryExpression(node);
                case "break_statement": return new BreakStatement(node);
                case "attribute_specifier": return new AttributeSpecifier(node);
                case "union_specifier": return new UnionSpecifier(node);
                case "true": return new True(node);
                case "false": return new False(node);
                case "number_literal": return new NumberLiteral(node);
                case "bitfield_clause": return new BitfieldClause(node);
                case "goto_statement": return new GotoStatement(node);
                case "type_descriptor": return new TypeDescriptor(node);
                case "assignment_expression": return new AssignmentExpression(node);
                case "declaration_list": return new DeclarationList(node);
                case "primitive_type": return new PrimitiveType(node);
                case "declaration": return new Declaration(node);
                case "if_statement": return new IfStatement(node);
                case "abstract_parenthesized_declarator": return new AbstractParenthesizedDeclarator(node);
                case "parameter_list": return new ParameterList(node);
                case "preproc_ifdef": return new PreprocIfdef(node);
                case "subscript_expression": return new SubscriptExpression(node);
                case "string_literal": return new StringLiteral(node);
                case "abstract_pointer_declarator": return new AbstractPointerDeclarator(node);
                case "update_expression": return new UpdateExpression(node);
                case "char_literal": return new CharLiteral(node);
                case "attributed_statement": return new AttributedStatement(node);
                case "do_statement": return new DoStatement(node);
                case "attribute": return new Attribute(node);
                case "comment": return new Comment(node);
                case "abstract_array_declarator": return new AbstractArrayDeclarator(node);
                case "sized_type_specifier": return new SizedTypeSpecifier(node);
                case "escape_sequence": return new EscapeSequence(node);
                case "type_qualifier": return new TypeQualifier(node);
                case "enumerator_list": return new EnumeratorList(node);
                case "ERROR": return new ErrorNode(node);
                default: throw new System.ArgumentException("unknown node type: " + node.Kind, nameof(node));
            }
        }

    
        public string Kind { get; set; }

        protected CLanguageNode(TreeSitter.Node node)
        {
            Kind = node.Kind;
        }
    }
    
    public class CLanguageNodeTerminalNode : CLanguageNode
    {
        public CLanguageNodeTerminalNode(TreeSitter.Node node) : base(node)
        {
        }
    }
    
    public class ErrorNode : CLanguageNode
    {
        public ErrorNode(TreeSitter.Node node) : base(node)
        {
        }
    }

    public interface IAbstractDeclarator
    {
    }

    public interface IDeclarator
    {
    }

    public interface IExpression
    {
    }

    public interface IFieldDeclarator
    {
    }

    public interface IStatement
    {
    }

    public interface ITypeDeclarator
    {
    }

    public interface ITypeSpecifier
    {
    }

    public class AbstractArrayDeclarator : CLanguageNode, IAbstractDeclarator
    {
        public IAbstractDeclarator? Declarator { get; set; }
        public CLanguageNode? Size { get; set; }
        public System.Collections.Generic.List<TypeQualifier> Children { get; set; }
        public AbstractArrayDeclarator(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "abstract_array_declarator");
            
            {
                var tmp = node.ChildByFieldName("declarator");
                this.Declarator = tmp is null ? null : (IAbstractDeclarator) CLanguageNode.FromNode(tmp);
            }
            {
                var tmp = node.ChildByFieldName("size");
                this.Size = tmp is null ? null : (CLanguageNode) CLanguageNode.FromNode(tmp);
            }
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new TypeQualifier(x)).ToList();
        }
    }

    public class AbstractFunctionDeclarator : CLanguageNode, IAbstractDeclarator
    {
        public IAbstractDeclarator? Declarator { get; set; }
        public ParameterList Parameters { get; set; }
        public AbstractFunctionDeclarator(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "abstract_function_declarator");
            
            {
                var tmp = node.ChildByFieldName("declarator");
                this.Declarator = tmp is null ? null : (IAbstractDeclarator) CLanguageNode.FromNode(tmp);
            }
            this.Parameters = new ParameterList(node.ChildByFieldName("parameters"));
        }
    }

    public class AbstractParenthesizedDeclarator : CLanguageNode, IAbstractDeclarator
    {
        public System.Collections.Generic.List<IAbstractDeclarator> Children { get; set; }
        public AbstractParenthesizedDeclarator(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "abstract_parenthesized_declarator");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (IAbstractDeclarator) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class AbstractPointerDeclarator : CLanguageNode, IAbstractDeclarator
    {
        public IAbstractDeclarator? Declarator { get; set; }
        public System.Collections.Generic.List<TypeQualifier> Children { get; set; }
        public AbstractPointerDeclarator(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "abstract_pointer_declarator");
            
            {
                var tmp = node.ChildByFieldName("declarator");
                this.Declarator = tmp is null ? null : (IAbstractDeclarator) CLanguageNode.FromNode(tmp);
            }
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new TypeQualifier(x)).ToList();
        }
    }

    public class ArgumentList : CLanguageNode
    {
        public System.Collections.Generic.List<CLanguageNode> Children { get; set; }
        public ArgumentList(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "argument_list");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CLanguageNode) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ArrayDeclarator : CLanguageNode, IDeclarator, IFieldDeclarator, ITypeDeclarator
    {
        public CLanguageNode Declarator { get; set; }
        public CLanguageNode? Size { get; set; }
        public System.Collections.Generic.List<TypeQualifier> Children { get; set; }
        public ArrayDeclarator(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "array_declarator");
            
            this.Declarator = (CLanguageNode) CLanguageNode.FromNode(node.ChildByFieldName("declarator"))!;
            {
                var tmp = node.ChildByFieldName("size");
                this.Size = tmp is null ? null : (CLanguageNode) CLanguageNode.FromNode(tmp);
            }
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new TypeQualifier(x)).ToList();
        }
    }

    public class AssignmentExpression : CLanguageNode, IExpression
    {
        public CLanguageNode Left { get; set; }
        public CLanguageNodeTerminalNode Operator { get; set; }
        public IExpression Right { get; set; }
        public AssignmentExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "assignment_expression");
            
            this.Left = (CLanguageNode) CLanguageNode.FromNode(node.ChildByFieldName("left"))!;
            this.Operator = new CLanguageNodeTerminalNode(node.ChildByFieldName("operator"));
            this.Right = (IExpression) CLanguageNode.FromNode(node.ChildByFieldName("right"))!;
        }
    }

    public class Attribute : CLanguageNode
    {
        public Identifier Name { get; set; }
        public Identifier? Prefix { get; set; }
        public System.Collections.Generic.List<ArgumentList> Children { get; set; }
        public Attribute(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "attribute");
            
            this.Name = new Identifier(node.ChildByFieldName("name"));
            {
                var tmp = node.ChildByFieldName("prefix");
                this.Prefix = tmp is null ? null : new Identifier(tmp);
            }
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new ArgumentList(x)).ToList();
        }
    }

    public class AttributeDeclaration : CLanguageNode
    {
        public System.Collections.Generic.List<Attribute> Children { get; set; }
        public AttributeDeclaration(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "attribute_declaration");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Attribute(x)).ToList();
        }
    }

    public class AttributeSpecifier : CLanguageNode
    {
        public System.Collections.Generic.List<ArgumentList> Children { get; set; }
        public AttributeSpecifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "attribute_specifier");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new ArgumentList(x)).ToList();
        }
    }

    public class AttributedDeclarator : CLanguageNode, IDeclarator, IFieldDeclarator, ITypeDeclarator
    {
        public System.Collections.Generic.List<CLanguageNode> Children { get; set; }
        public AttributedDeclarator(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "attributed_declarator");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CLanguageNode) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class AttributedStatement : CLanguageNode
    {
        public System.Collections.Generic.List<CLanguageNode> Children { get; set; }
        public AttributedStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "attributed_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CLanguageNode) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class BinaryExpression : CLanguageNode, IExpression
    {
        public CLanguageNode Left { get; set; }
        public CLanguageNodeTerminalNode Operator { get; set; }
        public CLanguageNode Right { get; set; }
        public BinaryExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "binary_expression");
            
            this.Left = (CLanguageNode) CLanguageNode.FromNode(node.ChildByFieldName("left"))!;
            this.Operator = new CLanguageNodeTerminalNode(node.ChildByFieldName("operator"));
            this.Right = (CLanguageNode) CLanguageNode.FromNode(node.ChildByFieldName("right"))!;
        }
    }

    public class BitfieldClause : CLanguageNode
    {
        public System.Collections.Generic.List<IExpression> Children { get; set; }
        public BitfieldClause(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "bitfield_clause");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (IExpression) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class BreakStatement : CLanguageNode, IStatement
    {
        public BreakStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "break_statement");
            
        }
    }

    public class CallExpression : CLanguageNode, IExpression
    {
        public ArgumentList Arguments { get; set; }
        public IExpression Function { get; set; }
        public CallExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "call_expression");
            
            this.Arguments = new ArgumentList(node.ChildByFieldName("arguments"));
            this.Function = (IExpression) CLanguageNode.FromNode(node.ChildByFieldName("function"))!;
        }
    }

    public class CaseStatement : CLanguageNode, IStatement
    {
        public IExpression? Value { get; set; }
        public System.Collections.Generic.List<CLanguageNode> Children { get; set; }
        public CaseStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "case_statement");
            
            {
                var tmp = node.ChildByFieldName("value");
                this.Value = tmp is null ? null : (IExpression) CLanguageNode.FromNode(tmp);
            }
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CLanguageNode) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class CastExpression : CLanguageNode, IExpression
    {
        public TypeDescriptor Type { get; set; }
        public IExpression Value { get; set; }
        public CastExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "cast_expression");
            
            this.Type = new TypeDescriptor(node.ChildByFieldName("type"));
            this.Value = (IExpression) CLanguageNode.FromNode(node.ChildByFieldName("value"))!;
        }
    }

    public class CharLiteral : CLanguageNode, IExpression
    {
        public System.Collections.Generic.List<EscapeSequence> Children { get; set; }
        public CharLiteral(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "char_literal");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new EscapeSequence(x)).ToList();
        }
    }

    public class CommaExpression : CLanguageNode
    {
        public IExpression Left { get; set; }
        public CLanguageNode Right { get; set; }
        public CommaExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "comma_expression");
            
            this.Left = (IExpression) CLanguageNode.FromNode(node.ChildByFieldName("left"))!;
            this.Right = (CLanguageNode) CLanguageNode.FromNode(node.ChildByFieldName("right"))!;
        }
    }

    public class CompoundLiteralExpression : CLanguageNode, IExpression
    {
        public TypeDescriptor Type { get; set; }
        public InitializerList Value { get; set; }
        public CompoundLiteralExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "compound_literal_expression");
            
            this.Type = new TypeDescriptor(node.ChildByFieldName("type"));
            this.Value = new InitializerList(node.ChildByFieldName("value"));
        }
    }

    public class CompoundStatement : CLanguageNode, IStatement
    {
        public System.Collections.Generic.List<CLanguageNode> Children { get; set; }
        public CompoundStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "compound_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CLanguageNode) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ConcatenatedString : CLanguageNode, IExpression
    {
        public System.Collections.Generic.List<StringLiteral> Children { get; set; }
        public ConcatenatedString(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "concatenated_string");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new StringLiteral(x)).ToList();
        }
    }

    public class ConditionalExpression : CLanguageNode, IExpression
    {
        public IExpression Alternative { get; set; }
        public IExpression Condition { get; set; }
        public IExpression Consequence { get; set; }
        public ConditionalExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "conditional_expression");
            
            this.Alternative = (IExpression) CLanguageNode.FromNode(node.ChildByFieldName("alternative"))!;
            this.Condition = (IExpression) CLanguageNode.FromNode(node.ChildByFieldName("condition"))!;
            this.Consequence = (IExpression) CLanguageNode.FromNode(node.ChildByFieldName("consequence"))!;
        }
    }

    public class ContinueStatement : CLanguageNode, IStatement
    {
        public ContinueStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "continue_statement");
            
        }
    }

    public class Declaration : CLanguageNode
    {
        public System.Collections.Generic.List<CLanguageNode> Declarator { get; set; }
        public ITypeSpecifier Type { get; set; }
        public System.Collections.Generic.List<CLanguageNode> Children { get; set; }
        public Declaration(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "declaration");
            
            this.Declarator = node.ChildrenByFieldName("declarator").Select(x => (CLanguageNode) CLanguageNode.FromNode(x)!).ToList();
            this.Type = (ITypeSpecifier) CLanguageNode.FromNode(node.ChildByFieldName("type"))!;
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CLanguageNode) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class DeclarationList : CLanguageNode
    {
        public System.Collections.Generic.List<CLanguageNode> Children { get; set; }
        public DeclarationList(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "declaration_list");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CLanguageNode) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class DoStatement : CLanguageNode, IStatement
    {
        public IStatement Body { get; set; }
        public ParenthesizedExpression Condition { get; set; }
        public DoStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "do_statement");
            
            this.Body = (IStatement) CLanguageNode.FromNode(node.ChildByFieldName("body"))!;
            this.Condition = new ParenthesizedExpression(node.ChildByFieldName("condition"));
        }
    }

    public class EnumSpecifier : CLanguageNode, ITypeSpecifier
    {
        public EnumeratorList? Body { get; set; }
        public TypeIdentifier? Name { get; set; }
        public EnumSpecifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "enum_specifier");
            
            {
                var tmp = node.ChildByFieldName("body");
                this.Body = tmp is null ? null : new EnumeratorList(tmp);
            }
            {
                var tmp = node.ChildByFieldName("name");
                this.Name = tmp is null ? null : new TypeIdentifier(tmp);
            }
        }
    }

    public class Enumerator : CLanguageNode
    {
        public Identifier Name { get; set; }
        public IExpression? Value { get; set; }
        public Enumerator(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "enumerator");
            
            this.Name = new Identifier(node.ChildByFieldName("name"));
            {
                var tmp = node.ChildByFieldName("value");
                this.Value = tmp is null ? null : (IExpression) CLanguageNode.FromNode(tmp);
            }
        }
    }

    public class EnumeratorList : CLanguageNode
    {
        public System.Collections.Generic.List<Enumerator> Children { get; set; }
        public EnumeratorList(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "enumerator_list");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Enumerator(x)).ToList();
        }
    }

    public class ExpressionStatement : CLanguageNode, IStatement
    {
        public System.Collections.Generic.List<CLanguageNode> Children { get; set; }
        public ExpressionStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "expression_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CLanguageNode) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class FieldDeclaration : CLanguageNode
    {
        public System.Collections.Generic.List<IFieldDeclarator> Declarator { get; set; }
        public ITypeSpecifier Type { get; set; }
        public System.Collections.Generic.List<CLanguageNode> Children { get; set; }
        public FieldDeclaration(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "field_declaration");
            
            this.Declarator = node.ChildrenByFieldName("declarator").Select(x => (IFieldDeclarator) CLanguageNode.FromNode(x)!).ToList();
            this.Type = (ITypeSpecifier) CLanguageNode.FromNode(node.ChildByFieldName("type"))!;
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CLanguageNode) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class FieldDeclarationList : CLanguageNode
    {
        public System.Collections.Generic.List<CLanguageNode> Children { get; set; }
        public FieldDeclarationList(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "field_declaration_list");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CLanguageNode) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class FieldDesignator : CLanguageNode
    {
        public System.Collections.Generic.List<FieldIdentifier> Children { get; set; }
        public FieldDesignator(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "field_designator");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new FieldIdentifier(x)).ToList();
        }
    }

    public class FieldExpression : CLanguageNode, IExpression
    {
        public IExpression Argument { get; set; }
        public FieldIdentifier Field { get; set; }
        public CLanguageNodeTerminalNode Operator { get; set; }
        public FieldExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "field_expression");
            
            this.Argument = (IExpression) CLanguageNode.FromNode(node.ChildByFieldName("argument"))!;
            this.Field = new FieldIdentifier(node.ChildByFieldName("field"));
            this.Operator = new CLanguageNodeTerminalNode(node.ChildByFieldName("operator"));
        }
    }

    public class ForStatement : CLanguageNode, IStatement
    {
        public IExpression? Condition { get; set; }
        public CLanguageNode? Initializer { get; set; }
        public CLanguageNode? Update { get; set; }
        public System.Collections.Generic.List<IStatement> Children { get; set; }
        public ForStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "for_statement");
            
            {
                var tmp = node.ChildByFieldName("condition");
                this.Condition = tmp is null ? null : (IExpression) CLanguageNode.FromNode(tmp);
            }
            {
                var tmp = node.ChildByFieldName("initializer");
                this.Initializer = tmp is null ? null : (CLanguageNode) CLanguageNode.FromNode(tmp);
            }
            {
                var tmp = node.ChildByFieldName("update");
                this.Update = tmp is null ? null : (CLanguageNode) CLanguageNode.FromNode(tmp);
            }
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (IStatement) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class FunctionDeclarator : CLanguageNode, IDeclarator, IFieldDeclarator, ITypeDeclarator
    {
        public CLanguageNode Declarator { get; set; }
        public ParameterList Parameters { get; set; }
        public System.Collections.Generic.List<AttributeSpecifier> Children { get; set; }
        public FunctionDeclarator(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "function_declarator");
            
            this.Declarator = (CLanguageNode) CLanguageNode.FromNode(node.ChildByFieldName("declarator"))!;
            this.Parameters = new ParameterList(node.ChildByFieldName("parameters"));
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new AttributeSpecifier(x)).ToList();
        }
    }

    public class FunctionDefinition : CLanguageNode
    {
        public CompoundStatement Body { get; set; }
        public IDeclarator Declarator { get; set; }
        public ITypeSpecifier Type { get; set; }
        public System.Collections.Generic.List<CLanguageNode> Children { get; set; }
        public FunctionDefinition(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "function_definition");
            
            this.Body = new CompoundStatement(node.ChildByFieldName("body"));
            this.Declarator = (IDeclarator) CLanguageNode.FromNode(node.ChildByFieldName("declarator"))!;
            this.Type = (ITypeSpecifier) CLanguageNode.FromNode(node.ChildByFieldName("type"))!;
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CLanguageNode) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class GotoStatement : CLanguageNode, IStatement
    {
        public StatementIdentifier Label { get; set; }
        public GotoStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "goto_statement");
            
            this.Label = new StatementIdentifier(node.ChildByFieldName("label"));
        }
    }

    public class IfStatement : CLanguageNode, IStatement
    {
        public IStatement? Alternative { get; set; }
        public ParenthesizedExpression Condition { get; set; }
        public IStatement Consequence { get; set; }
        public IfStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "if_statement");
            
            {
                var tmp = node.ChildByFieldName("alternative");
                this.Alternative = tmp is null ? null : (IStatement) CLanguageNode.FromNode(tmp);
            }
            this.Condition = new ParenthesizedExpression(node.ChildByFieldName("condition"));
            this.Consequence = (IStatement) CLanguageNode.FromNode(node.ChildByFieldName("consequence"))!;
        }
    }

    public class InitDeclarator : CLanguageNode
    {
        public IDeclarator Declarator { get; set; }
        public CLanguageNode Value { get; set; }
        public InitDeclarator(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "init_declarator");
            
            this.Declarator = (IDeclarator) CLanguageNode.FromNode(node.ChildByFieldName("declarator"))!;
            this.Value = (CLanguageNode) CLanguageNode.FromNode(node.ChildByFieldName("value"))!;
        }
    }

    public class InitializerList : CLanguageNode
    {
        public System.Collections.Generic.List<CLanguageNode> Children { get; set; }
        public InitializerList(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "initializer_list");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CLanguageNode) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class InitializerPair : CLanguageNode
    {
        public System.Collections.Generic.List<CLanguageNode> Designator { get; set; }
        public CLanguageNode Value { get; set; }
        public InitializerPair(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "initializer_pair");
            
            this.Designator = node.ChildrenByFieldName("designator").Select(x => (CLanguageNode) CLanguageNode.FromNode(x)!).ToList();
            this.Value = (CLanguageNode) CLanguageNode.FromNode(node.ChildByFieldName("value"))!;
        }
    }

    public class LabeledStatement : CLanguageNode, IStatement
    {
        public StatementIdentifier Label { get; set; }
        public System.Collections.Generic.List<IStatement> Children { get; set; }
        public LabeledStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "labeled_statement");
            
            this.Label = new StatementIdentifier(node.ChildByFieldName("label"));
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (IStatement) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class LinkageSpecification : CLanguageNode
    {
        public CLanguageNode Body { get; set; }
        public StringLiteral Value { get; set; }
        public LinkageSpecification(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "linkage_specification");
            
            this.Body = (CLanguageNode) CLanguageNode.FromNode(node.ChildByFieldName("body"))!;
            this.Value = new StringLiteral(node.ChildByFieldName("value"));
        }
    }

    public class MacroTypeSpecifier : CLanguageNode, ITypeSpecifier
    {
        public Identifier Name { get; set; }
        public TypeDescriptor Type { get; set; }
        public MacroTypeSpecifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "macro_type_specifier");
            
            this.Name = new Identifier(node.ChildByFieldName("name"));
            this.Type = new TypeDescriptor(node.ChildByFieldName("type"));
        }
    }

    public class MsBasedModifier : CLanguageNode
    {
        public System.Collections.Generic.List<ArgumentList> Children { get; set; }
        public MsBasedModifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "ms_based_modifier");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new ArgumentList(x)).ToList();
        }
    }

    public class MsCallModifier : CLanguageNode
    {
        public MsCallModifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "ms_call_modifier");
            
        }
    }

    public class MsDeclspecModifier : CLanguageNode
    {
        public System.Collections.Generic.List<Identifier> Children { get; set; }
        public MsDeclspecModifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "ms_declspec_modifier");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Identifier(x)).ToList();
        }
    }

    public class MsPointerModifier : CLanguageNode
    {
        public System.Collections.Generic.List<CLanguageNode> Children { get; set; }
        public MsPointerModifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "ms_pointer_modifier");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CLanguageNode) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class MsUnalignedPtrModifier : CLanguageNode
    {
        public MsUnalignedPtrModifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "ms_unaligned_ptr_modifier");
            
        }
    }

    public class ParameterDeclaration : CLanguageNode
    {
        public CLanguageNode? Declarator { get; set; }
        public ITypeSpecifier Type { get; set; }
        public System.Collections.Generic.List<CLanguageNode> Children { get; set; }
        public ParameterDeclaration(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "parameter_declaration");
            
            {
                var tmp = node.ChildByFieldName("declarator");
                this.Declarator = tmp is null ? null : (CLanguageNode) CLanguageNode.FromNode(tmp);
            }
            this.Type = (ITypeSpecifier) CLanguageNode.FromNode(node.ChildByFieldName("type"))!;
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CLanguageNode) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ParameterList : CLanguageNode
    {
        public System.Collections.Generic.List<CLanguageNode> Children { get; set; }
        public ParameterList(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "parameter_list");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CLanguageNode) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ParenthesizedDeclarator : CLanguageNode, IDeclarator, IFieldDeclarator, ITypeDeclarator
    {
        public System.Collections.Generic.List<CLanguageNode> Children { get; set; }
        public ParenthesizedDeclarator(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "parenthesized_declarator");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CLanguageNode) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class ParenthesizedExpression : CLanguageNode, IExpression
    {
        public System.Collections.Generic.List<CLanguageNode> Children { get; set; }
        public ParenthesizedExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "parenthesized_expression");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CLanguageNode) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class PointerDeclarator : CLanguageNode, IDeclarator, IFieldDeclarator, ITypeDeclarator
    {
        public CLanguageNode Declarator { get; set; }
        public System.Collections.Generic.List<CLanguageNode> Children { get; set; }
        public PointerDeclarator(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "pointer_declarator");
            
            this.Declarator = (CLanguageNode) CLanguageNode.FromNode(node.ChildByFieldName("declarator"))!;
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CLanguageNode) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class PointerExpression : CLanguageNode, IExpression
    {
        public IExpression Argument { get; set; }
        public CLanguageNodeTerminalNode Operator { get; set; }
        public PointerExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "pointer_expression");
            
            this.Argument = (IExpression) CLanguageNode.FromNode(node.ChildByFieldName("argument"))!;
            this.Operator = new CLanguageNodeTerminalNode(node.ChildByFieldName("operator"));
        }
    }

    public class PreprocCall : CLanguageNode
    {
        public PreprocArg? Argument { get; set; }
        public PreprocDirective Directive { get; set; }
        public PreprocCall(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "preproc_call");
            
            {
                var tmp = node.ChildByFieldName("argument");
                this.Argument = tmp is null ? null : new PreprocArg(tmp);
            }
            this.Directive = new PreprocDirective(node.ChildByFieldName("directive"));
        }
    }

    public class PreprocDef : CLanguageNode
    {
        public Identifier Name { get; set; }
        public PreprocArg? Value { get; set; }
        public PreprocDef(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "preproc_def");
            
            this.Name = new Identifier(node.ChildByFieldName("name"));
            {
                var tmp = node.ChildByFieldName("value");
                this.Value = tmp is null ? null : new PreprocArg(tmp);
            }
        }
    }

    public class PreprocDefined : CLanguageNode
    {
        public System.Collections.Generic.List<Identifier> Children { get; set; }
        public PreprocDefined(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "preproc_defined");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Identifier(x)).ToList();
        }
    }

    public class PreprocElif : CLanguageNode
    {
        public CLanguageNode? Alternative { get; set; }
        public CLanguageNode Condition { get; set; }
        public System.Collections.Generic.List<CLanguageNode> Children { get; set; }
        public PreprocElif(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "preproc_elif");
            
            {
                var tmp = node.ChildByFieldName("alternative");
                this.Alternative = tmp is null ? null : (CLanguageNode) CLanguageNode.FromNode(tmp);
            }
            this.Condition = (CLanguageNode) CLanguageNode.FromNode(node.ChildByFieldName("condition"))!;
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CLanguageNode) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class PreprocElse : CLanguageNode
    {
        public System.Collections.Generic.List<CLanguageNode> Children { get; set; }
        public PreprocElse(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "preproc_else");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CLanguageNode) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class PreprocFunctionDef : CLanguageNode
    {
        public Identifier Name { get; set; }
        public PreprocParams Parameters { get; set; }
        public PreprocArg? Value { get; set; }
        public PreprocFunctionDef(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "preproc_function_def");
            
            this.Name = new Identifier(node.ChildByFieldName("name"));
            this.Parameters = new PreprocParams(node.ChildByFieldName("parameters"));
            {
                var tmp = node.ChildByFieldName("value");
                this.Value = tmp is null ? null : new PreprocArg(tmp);
            }
        }
    }

    public class PreprocIf : CLanguageNode
    {
        public CLanguageNode? Alternative { get; set; }
        public CLanguageNode Condition { get; set; }
        public System.Collections.Generic.List<CLanguageNode> Children { get; set; }
        public PreprocIf(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "preproc_if");
            
            {
                var tmp = node.ChildByFieldName("alternative");
                this.Alternative = tmp is null ? null : (CLanguageNode) CLanguageNode.FromNode(tmp);
            }
            this.Condition = (CLanguageNode) CLanguageNode.FromNode(node.ChildByFieldName("condition"))!;
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CLanguageNode) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class PreprocIfdef : CLanguageNode
    {
        public CLanguageNode? Alternative { get; set; }
        public Identifier Name { get; set; }
        public System.Collections.Generic.List<CLanguageNode> Children { get; set; }
        public PreprocIfdef(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "preproc_ifdef");
            
            {
                var tmp = node.ChildByFieldName("alternative");
                this.Alternative = tmp is null ? null : (CLanguageNode) CLanguageNode.FromNode(tmp);
            }
            this.Name = new Identifier(node.ChildByFieldName("name"));
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CLanguageNode) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class PreprocInclude : CLanguageNode
    {
        public CLanguageNode Path { get; set; }
        public PreprocInclude(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "preproc_include");
            
            this.Path = (CLanguageNode) CLanguageNode.FromNode(node.ChildByFieldName("path"))!;
        }
    }

    public class PreprocParams : CLanguageNode
    {
        public System.Collections.Generic.List<Identifier> Children { get; set; }
        public PreprocParams(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "preproc_params");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new Identifier(x)).ToList();
        }
    }

    public class ReturnStatement : CLanguageNode, IStatement
    {
        public System.Collections.Generic.List<CLanguageNode> Children { get; set; }
        public ReturnStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "return_statement");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CLanguageNode) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class SizedTypeSpecifier : CLanguageNode, ITypeSpecifier
    {
        public CLanguageNode? Type { get; set; }
        public SizedTypeSpecifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "sized_type_specifier");
            
            {
                var tmp = node.ChildByFieldName("type");
                this.Type = tmp is null ? null : (CLanguageNode) CLanguageNode.FromNode(tmp);
            }
        }
    }

    public class SizeofExpression : CLanguageNode, IExpression
    {
        public TypeDescriptor? Type { get; set; }
        public IExpression? Value { get; set; }
        public SizeofExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "sizeof_expression");
            
            {
                var tmp = node.ChildByFieldName("type");
                this.Type = tmp is null ? null : new TypeDescriptor(tmp);
            }
            {
                var tmp = node.ChildByFieldName("value");
                this.Value = tmp is null ? null : (IExpression) CLanguageNode.FromNode(tmp);
            }
        }
    }

    public class StorageClassSpecifier : CLanguageNode
    {
        public StorageClassSpecifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "storage_class_specifier");
            
        }
    }

    public class StringLiteral : CLanguageNode, IExpression
    {
        public System.Collections.Generic.List<EscapeSequence> Children { get; set; }
        public StringLiteral(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "string_literal");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new EscapeSequence(x)).ToList();
        }
    }

    public class StructSpecifier : CLanguageNode, ITypeSpecifier
    {
        public FieldDeclarationList? Body { get; set; }
        public TypeIdentifier? Name { get; set; }
        public System.Collections.Generic.List<MsDeclspecModifier> Children { get; set; }
        public StructSpecifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "struct_specifier");
            
            {
                var tmp = node.ChildByFieldName("body");
                this.Body = tmp is null ? null : new FieldDeclarationList(tmp);
            }
            {
                var tmp = node.ChildByFieldName("name");
                this.Name = tmp is null ? null : new TypeIdentifier(tmp);
            }
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new MsDeclspecModifier(x)).ToList();
        }
    }

    public class SubscriptDesignator : CLanguageNode
    {
        public System.Collections.Generic.List<IExpression> Children { get; set; }
        public SubscriptDesignator(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "subscript_designator");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (IExpression) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class SubscriptExpression : CLanguageNode, IExpression
    {
        public IExpression Argument { get; set; }
        public IExpression Index { get; set; }
        public SubscriptExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "subscript_expression");
            
            this.Argument = (IExpression) CLanguageNode.FromNode(node.ChildByFieldName("argument"))!;
            this.Index = (IExpression) CLanguageNode.FromNode(node.ChildByFieldName("index"))!;
        }
    }

    public class SwitchStatement : CLanguageNode, IStatement
    {
        public CompoundStatement Body { get; set; }
        public ParenthesizedExpression Condition { get; set; }
        public SwitchStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "switch_statement");
            
            this.Body = new CompoundStatement(node.ChildByFieldName("body"));
            this.Condition = new ParenthesizedExpression(node.ChildByFieldName("condition"));
        }
    }

    public class TranslationUnit : CLanguageNode
    {
        public System.Collections.Generic.List<CLanguageNode> Children { get; set; }
        public TranslationUnit(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "translation_unit");
            
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => (CLanguageNode) CLanguageNode.FromNode(x)!).ToList();
        }
    }

    public class TypeDefinition : CLanguageNode
    {
        public System.Collections.Generic.List<ITypeDeclarator> Declarator { get; set; }
        public ITypeSpecifier Type { get; set; }
        public System.Collections.Generic.List<TypeQualifier> Children { get; set; }
        public TypeDefinition(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "type_definition");
            
            this.Declarator = node.ChildrenByFieldName("declarator").Select(x => (ITypeDeclarator) CLanguageNode.FromNode(x)!).ToList();
            this.Type = (ITypeSpecifier) CLanguageNode.FromNode(node.ChildByFieldName("type"))!;
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new TypeQualifier(x)).ToList();
        }
    }

    public class TypeDescriptor : CLanguageNode
    {
        public IAbstractDeclarator? Declarator { get; set; }
        public ITypeSpecifier Type { get; set; }
        public System.Collections.Generic.List<TypeQualifier> Children { get; set; }
        public TypeDescriptor(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "type_descriptor");
            
            {
                var tmp = node.ChildByFieldName("declarator");
                this.Declarator = tmp is null ? null : (IAbstractDeclarator) CLanguageNode.FromNode(tmp);
            }
            this.Type = (ITypeSpecifier) CLanguageNode.FromNode(node.ChildByFieldName("type"))!;
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new TypeQualifier(x)).ToList();
        }
    }

    public class TypeQualifier : CLanguageNode
    {
        public TypeQualifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "type_qualifier");
            
        }
    }

    public class UnaryExpression : CLanguageNode, IExpression
    {
        public CLanguageNode Argument { get; set; }
        public CLanguageNodeTerminalNode Operator { get; set; }
        public UnaryExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "unary_expression");
            
            this.Argument = (CLanguageNode) CLanguageNode.FromNode(node.ChildByFieldName("argument"))!;
            this.Operator = new CLanguageNodeTerminalNode(node.ChildByFieldName("operator"));
        }
    }

    public class UnionSpecifier : CLanguageNode, ITypeSpecifier
    {
        public FieldDeclarationList? Body { get; set; }
        public TypeIdentifier? Name { get; set; }
        public System.Collections.Generic.List<MsDeclspecModifier> Children { get; set; }
        public UnionSpecifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "union_specifier");
            
            {
                var tmp = node.ChildByFieldName("body");
                this.Body = tmp is null ? null : new FieldDeclarationList(tmp);
            }
            {
                var tmp = node.ChildByFieldName("name");
                this.Name = tmp is null ? null : new TypeIdentifier(tmp);
            }
            this.Children = node.NamedChildrenWithFields
                .Where(x => x.Key == null && !x.Value.IsExtra)
                .Select(x => x.Value)
                .Select(x => new MsDeclspecModifier(x)).ToList();
        }
    }

    public class UpdateExpression : CLanguageNode, IExpression
    {
        public IExpression Argument { get; set; }
        public CLanguageNodeTerminalNode Operator { get; set; }
        public UpdateExpression(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "update_expression");
            
            this.Argument = (IExpression) CLanguageNode.FromNode(node.ChildByFieldName("argument"))!;
            this.Operator = new CLanguageNodeTerminalNode(node.ChildByFieldName("operator"));
        }
    }

    public class VariadicParameter : CLanguageNode
    {
        public VariadicParameter(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "variadic_parameter");
            
        }
    }

    public class WhileStatement : CLanguageNode, IStatement
    {
        public IStatement Body { get; set; }
        public ParenthesizedExpression Condition { get; set; }
        public WhileStatement(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "while_statement");
            
            this.Body = (IStatement) CLanguageNode.FromNode(node.ChildByFieldName("body"))!;
            this.Condition = new ParenthesizedExpression(node.ChildByFieldName("condition"));
        }
    }

    public class Comment : CLanguageNode
    {
        public Comment(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "comment");
            
        }
    }

    public class EscapeSequence : CLanguageNode
    {
        public EscapeSequence(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "escape_sequence");
            
        }
    }

    public class False : CLanguageNode, IExpression
    {
        public False(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "false");
            
        }
    }

    public class FieldIdentifier : CLanguageNode, IFieldDeclarator
    {
        public FieldIdentifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "field_identifier");
            
        }
    }

    public class Identifier : CLanguageNode, IDeclarator, IExpression
    {
        public Identifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "identifier");
            
        }
    }

    public class MsRestrictModifier : CLanguageNode
    {
        public MsRestrictModifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "ms_restrict_modifier");
            
        }
    }

    public class MsSignedPtrModifier : CLanguageNode
    {
        public MsSignedPtrModifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "ms_signed_ptr_modifier");
            
        }
    }

    public class MsUnsignedPtrModifier : CLanguageNode
    {
        public MsUnsignedPtrModifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "ms_unsigned_ptr_modifier");
            
        }
    }

    public class Null : CLanguageNode, IExpression
    {
        public Null(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "null");
            
        }
    }

    public class NumberLiteral : CLanguageNode, IExpression
    {
        public NumberLiteral(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "number_literal");
            
        }
    }

    public class PreprocArg : CLanguageNode
    {
        public PreprocArg(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "preproc_arg");
            
        }
    }

    public class PreprocDirective : CLanguageNode
    {
        public PreprocDirective(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "preproc_directive");
            
        }
    }

    public class PrimitiveType : CLanguageNode, ITypeSpecifier
    {
        public PrimitiveType(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "primitive_type");
            
        }
    }

    public class StatementIdentifier : CLanguageNode
    {
        public StatementIdentifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "statement_identifier");
            
        }
    }

    public class SystemLibString : CLanguageNode
    {
        public SystemLibString(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "system_lib_string");
            
        }
    }

    public class True : CLanguageNode, IExpression
    {
        public True(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "true");
            
        }
    }

    public class TypeIdentifier : CLanguageNode, ITypeDeclarator, ITypeSpecifier
    {
        public TypeIdentifier(TreeSitter.Node node) : base(node)
        {
            System.Diagnostics.Debug.Assert(node.Kind == "type_identifier");
            
        }
    }
}